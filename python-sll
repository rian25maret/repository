class node:
    def __init__(self, data = None, next = None):
        self.data = data
        self.next = next

class singly_linked_list:
    def __init__(self):
        self.head = None
    
    # fungsi menambah node di depan
    def tambah_di_depan(self, data):
        self.head = node(data=data, next=self.head)  

    # fungsi mengecek kosong
    def kosong(self):
        return self.head == None

    # fungsi menambah node di belakang
    def tambah_di_belakang(self, data):
        if not self.head:
            self.head = node(data=data)
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = node(data=data)
    
    # fungsi menghapus node
    def hapus_node(self, key):
        curr = self.head
        prev = None
        while curr and curr.data != key:
            prev = curr
            curr = curr.next
        if prev is None:
            self.head = curr.next
        elif curr:
            prev.next = curr.next
            curr.next = None

    # fungsi menangmbil node terakhir
    def ambil_node_akhir(self):
        temp = self.head
        while(temp.next is not None):
            temp = temp.next
        return temp.data

    # fungsi mencetak node
    def cetak_node( self ):
        node = self.head
        while node != None:
            print(node.data, end =" >> ")
            node = node.next


s = singly_linked_list()
s.tambah_di_depan(3)
s.tambah_di_belakang(6)
s.tambah_di_depan(7)

s.cetak_node()
